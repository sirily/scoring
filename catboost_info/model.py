### Types to hold CTR's data

class catboost_model_ctr(object):
    def __init__(self, base_hash, base_ctr_type, target_border_idx, prior_num, prior_denom, shift, scale):
        self.base_hash = base_hash
        self.base_ctr_type = base_ctr_type
        self.target_border_idx = target_border_idx
        self.prior_num = prior_num
        self.prior_denom = prior_denom
        self.shift = shift
        self.scale = scale

    def calc(self, count_in_class, total_count):
        ctr = (count_in_class + self.prior_num) / float(total_count + self.prior_denom)
        return (ctr + self.shift) * self.scale


class catboost_bin_feature_index_value(object):
    def __init__(self, bin_index, check_value_equal, value):
        self.bin_index = bin_index
        self.check_value_equal = check_value_equal
        self.value = value


class catboost_ctr_mean_history(object):
    def __init__(self, sum, count):
        self.sum = sum
        self.count = count


class catboost_ctr_value_table(object):
    def __init__(self, index_hash_viewer, target_classes_count, counter_denominator, ctr_mean_history, ctr_total):
        self.index_hash_viewer = index_hash_viewer
        self.target_classes_count = target_classes_count
        self.counter_denominator = counter_denominator
        self.ctr_mean_history = ctr_mean_history
        self.ctr_total = ctr_total

    def resolve_hash_index(self, hash):
        try:
            return self.index_hash_viewer[hash]
        except KeyError:
            return None


class catboost_ctr_data(object):
    def __init__(self, learn_ctrs):
        self.learn_ctrs = learn_ctrs


class catboost_projection(object):
    def __init__(self, transposed_cat_feature_indexes, binarized_indexes):
        self.transposed_cat_feature_indexes = transposed_cat_feature_indexes
        self.binarized_indexes = binarized_indexes


class catboost_compressed_model_ctr(object):
    def __init__(self, projection, model_ctrs):
        self.projection = projection
        self.model_ctrs = model_ctrs


class catboost_model_ctrs_container(object):
    def __init__(self, used_model_ctrs_count, compressed_model_ctrs, ctr_data):
        self.used_model_ctrs_count = used_model_ctrs_count
        self.compressed_model_ctrs = compressed_model_ctrs
        self.ctr_data = ctr_data


###  Model data
class catboost_model(object):
    float_features_index = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
    ]
    float_feature_count = 13
    cat_feature_count = 3
    binary_feature_count = 18
    tree_count = 23
    float_feature_borders = [
        [543067.5, 737295, 863616.5, 1043489.5, 1407938, 1574653.5, 1826061.5, 2471159, 3076565.5, 3751730.5, 4886914],
        [0.5, 3.5, 6.5, 8.5, 10.5],
        [2.5, 5.5],
        [8.5, 11.5, 12.5, 21.5],
        [9.64999962, 11.8500004, 13.0500002, 14.4499998, 27.25, 29.0499992, 38.1500015],
        [2167, 66022, 151646, 205678, 256201, 308924, 324852, 358281, 449768, 565741, 650551, 654643, 761739, 787941, 906642, 1239304, 1929609, 7047293],
        [0.5, 1.5],
        [5.5, 7.5, 8.5, 14.5, 36.5, 38.5, 59.5, 62.5, 79.5],
        [0.5, 1.5],
        [5621, 26191, 42152, 88374, 101134, 222640, 227843, 276331, 430122, 433092, 442805, 665214, 753797, 770968],
        [2527, 95826.5, 139013.5, 207565.5, 219374, 281143, 418304, 480082.5, 571577],
        [4249.5, 4413.5, 8619, 9027, 9735.5, 12188.5, 12322, 13715.5, 14062.5, 15754, 16974, 17942.5, 22504.5, 23215.5, 27907.5, 36713.5, 43980, 69840.5],
        [646.5, 647.5, 650.5, 699.5, 718.5, 720.5, 721.5, 737.5, 748.5, 750.5, 3405.5, 6195, 6225, 6250, 6775]
    ]
    tree_depth = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
    tree_split_border = [14, 1, 255, 11, 11, 5, 12, 5, 2, 4, 5, 4, 3, 3, 15, 4, 5, 1, 2, 10, 1, 9, 3, 4, 1, 6, 11, 3, 4, 8, 13, 3, 255, 8, 1, 4, 1, 4, 10, 1, 8, 14, 1, 8, 2, 12, 1, 2, 5, 3, 2, 10, 6, 3, 15, 2, 7, 1, 17, 255, 1, 5, 9, 7, 1, 6, 2, 1, 2, 8, 10, 2, 9, 7, 7, 2, 8, 13, 17, 2, 1, 5, 3, 2, 1, 1, 2, 1, 3, 4, 1, 10, 2, 14, 7, 3, 2, 7, 1, 6, 9, 6, 11, 9, 1, 4, 5, 4, 18, 18, 9, 11, 9, 2, 1, 16, 8, 14, 12, 6, 1, 1, 5, 7, 13, 13, 17, 8, 15, 2, 16, 5, 3, 6, 12, 2, 6, 7]
    tree_split_feature_index = [12, 9, 13, 5, 11, 0, 12, 9, 6, 12, 5, 1, 9, 11, 12, 0, 11, 1, 16, 9, 6, 11, 15, 5, 3, 4, 9, 10, 11, 0, 12, 3, 13, 7, 12, 3, 1, 10, 0, 2, 11, 11, 9, 5, 2, 5, 7, 4, 10, 0, 6, 5, 9, 1, 11, 8, 7, 15, 5, 13, 17, 4, 9, 0, 8, 5, 9, 0, 11, 12, 12, 7, 7, 12, 11, 15, 10, 9, 5, 17, 10, 7, 12, 1, 9, 5, 5, 11, 7, 4, 14, 11, 12, 5, 10, 4, 0, 9, 4, 10, 5, 7, 12, 12, 9, 9, 12, 7, 5, 11, 0, 0, 10, 1, 16, 5, 0, 9, 9, 11, 16, 10, 1, 4, 5, 11, 11, 9, 5, 3, 11, 12, 5, 0, 11, 10, 12, 5]
    tree_split_xor_mask = [0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    cat_features_index = [0, 1, 2]
    one_hot_cat_feature_index = [2]
    one_hot_hash_values = [
        [-121645124]
    ]
    ctr_feature_borders = [
        [4.99999905],
        [3.99999905, 5.99999905, 7.99999905],
        [2.99999905, 3.99999905],
        [0.999998987, 1.99999905]
    ]

    ## Aggregated array of leaf values for trees. Each tree is represented by a separate line:
    leaf_values = [
        -1.508454463416103, 0, -0.06236008302821329, 1.534251293067584, -0.7036653018052969, 0, 0.6063026677098702, 1.157424771606697, -0.9915849010215534, 0, -0.4020210087908072, 0.8978615489611501, -0.4288547034798277, 0, 0.2126556779957495, 0.3782718658573082, -1.039067649521773, 0, -0.107652904099563, 1.121335811253455, -0.490743552296284, 0, 0.7730138162974323, 0.9204383899719628, -0.875093598863837, 0, -0.1311552131422495, 0.7640057889775644, -0.406864424717573, 0, 0.5995396914286917, 0.9418661763819848, -0.9842879914562048, 0, -0.8560869221248539, 0.6617610319765227, -0.2580213304442366, 0, 0.3269507833536062, 0.5361872605819514, -0.6898510099783322, 0, -0.8454044110652558, 0.2482778367178216, -0.3111391757676842, 0, -0.0655742583023714, 0.3782718658573082, -1.005775745923724, 0, -0.4127353561533361, 0.981608480439205, -0.490743552296284, 0, 0.09370443810582021, 0.8740406806787042, -1.283509959110553, 0, -0.6004543485335074, 1.080668619354779, -0.6898510099783322, 0, 0.03998506858261412, 0.981608480439205,
        0.1839365705432415, 0, 0.4545926358136925, 0, 0.08023908682791635, 0, 0.3003617297541236, 0, -0.4110583802069547, 0.2466839466067547, 0.004778801465470785, 0.7136902532334223, 0.08685572160281775, 0, 0.2336900081516498, 0, -0.2123984014039753, 0, 0.1496079408709202, 0, -0.02812660186649277, 0, 0.2109196063991607, 0, -0.8104436732840733, 0.1808863705335482, -0.2103486844564114, 1.075370567608387, -0.08589053147568779, 0, 0.1355972771011531, 0.1857520216838273, -0.08241808032148477, 0, 0.2584255828206221, 0, 0, 0, 0.07672271483792917, 0, -0.4495163533235629, 0.1565565464625772, -0.04022827561260353, 0.4884797097873864, -0.1450014384049866, 0, 0.1908824486289493, 0.06766080409574071, -0.5804666769723993, 0, 0.1132044283887133, 0, -0.02948955076058616, 0, 0.1530351482384013, 0, -0.7665074616052312, 0.2037560933807215, -0.1866642740999682, 1.006527000834742, -0.1049352509271941, 0, -0.2466995137044054, 0.2366017123819727,
        0.0254774104599866, 0.3407545732131194, -0.01335057459946528, -0.01976505688389138, 0, 0.1163885962618888, 0, 0.01301959449838442, -0.03924004318167343, 0.3425787759672756, -0.00672164261998943, 0.01860026734123716, 0, 0, 0, 0, 0, 0, -0.09812957408621591, 0.6328522225176919, 0, 0, 0, 0.07723955514747623, 0, 0, -0.1526081395762506, 0.1941851081639048, 0, 0, 0, 0.04213864837819323, -0.5557600226315055, 0.04247469811418041, -0.2254511832991679, 0.04595066782597949, 0.06511921608165071, 0.5106282925634997, 0, 0.1463984662777243, -0.3456003200998969, -0.1555785125649826, -0.1393106226411996, -0.5381286470277675, 0, 0.2375592373039356, 0, 0.0934474922441919, 0, 0, -0.5657019242792983, 0.1547314406698321, 0, 0, 0, 0.6862876711154955, 0, 0, -0.816247621319247, -0.007094551263720802, 0, 0, 0, 0.8049002349753911,
        -0.215225203821584, 0.2371839766953771, 0.02461500388797519, 0.3100643734548169, -0.7781745798432602, 0.3749407557368739, -0.04996987093009705, 0.07674320469858507, -0.2954913981977563, -0.01871776173887151, -0.06113363249824237, 0.1703419938662494, 0.1860208370727051, -0.001637098507221704, 0.05632380974871014, -0.04683222489451534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.04299253462904457, 0, 0, -0.2012168749484297, 0.0589912573076016, 0.01452492663659334, 0.266461714855177, -0.2727577782596154, -0.2061204265097894, -0.09612304181883966, 0.1082415731899514, -0.1360891250978395, -0.04113548839967032, 0.06140081479371139, 0.279057123188089, 0.1056097607863653, -0.08957015657542133, 0.2710497872252567, 0.3724312936087864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0230971503581449, 0, -0.03763608549317276, 0, 0,
        -0.1550224773696128, -0.03892189627411504, -0.04014710555357515, 0.2279036965202561, -0.03775941833283764, -0.1025046418672339, 0.07786731491302715, 0.0179149106956089, 0.08564267817547518, 0.036542619325223, 0.06198381548578739, 0.0979697256645097, -0.2372429562943762, 0.1097365842254505, 0.2373957715732145, 0, -0.1112616603761187, 0.0728786768884966, -0.04531840235595913, -0.05616580221697821, 0.05843706419837037, 0.4241353236875449, -0.05132520192969654, 0.1556685449975601, -0.1627521961652695, 0.02946615808950908, -0.02470220962231492, 0.1012792679405025, -0.2335613217200014, 0.1550162930012782, 0.3824226660677829, 0.1949161359542333, -0.09261269598105668, 0.005483295869475721, 0, -0.008969573306708176, 0.06553208363169363, -0.06652426320128817, 0, -0.03653903906541719, -0.1100839593634498, -0.04374614592328642, 0, 0, 0.05876036065319439, 0.090982054133403, -0.02079350676138876, 0, -0.2812817307755537, -0.0132819180187198, -0.02065868622664772, -0.09866742033518848, -0.1473283005137122, -0.1460914838642915, 0, -0.1383249031682041, 0.1882277968902502, -0.3764333452208331, -0.06911797470085795, -0.04032593806804375, -0.350945913260532, -0.1838783075375821, -0.03928542445523366, 0.2200373067497852,
        -0.019090674289471, 0, -0.06446295215608581, 0, 0.1980772941361464, 0, 0.3046453068440028, 0, 0.06703566706513388, 0, 0.1525021009525128, 0, 0.1759693292813469, 0, 0.0887798974630294, 0, -0.06361583981312392, 0.6618144415850334, 0.04546642898985256, 0.4465270776906911, -0.1989612023304077, 0.6143390666258489, -0.01345644691979043, 0.354520198296628, -0.3049009458239542, 0.1584205202593024, -0.02174387566934968, 0.01908228403955661, -0.2748111171610915, 0.09575745640790544, 0.2902090243593476, 0.06923359049778317, 0, 0, 0.114446011708518, 0, 0, 0, -0.1499431678357108, 0, 0, 0, 0.0750697486026795, 0, 0, 0, -0.0623329277461456, 0, 0, 0, -0.2492911001130046, 0.1066516378924841, 0, 0, 0.2373874968800969, 0.09994418402378831, 0, 0, 0.07288951340613642, 0, 0, 0, -0.1472408673928635, 0,
        0.230579630022591, -0.00991222107011454, 0.1484398596086954, 0.1194770681384546, 0, -0.1344378822886313, 0, -0.03799060587478764, 0, 0.1951725537301012, 0, 0, 0, 0, 0, 0, 0.3052858479413865, 0.0161689801006107, -0.30045613385107, -0.03605368242684714, 0, -0.07116819029890536, 0, 0.1618669177459496, 0, 0.1431869402831462, 0.04246046860374699, 0.06586667650385411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1865568350322334, -0.1095282453975898, 0.007141365059249096, 0.04373688374352795, 0, -0.2618038540696648, -0.01860430635102508, -0.1278665285124532, 0, -0.04684398149113551, 0, -0.09497259741805769, 0, 0, 0, 0,
        -0.2772553091027052, 0.02507582570054601, -0.1309153180893952, 0.05006174586338868, 0, 0, 0, 0, 0, 0, -0.1017669096056273, 0.01494086646604549, 0, 0, 0, 0, -0.1047910234436162, 0.3845255453717861, -0.03596908389559807, 0.141238378801672, 0, 0, 0, 0, 0, 0, -0.002506973597501284, 0.2580438515232481, 0, 0, 0, 0, -0.3672794349744781, 0.1338033615699061, -0.3711737901396001, 0.01106224464217787, 0, 0, 0, 0, 0, 0, -0.5353717012409908, 0.005859267313155231, 0, 0, 0, 0, -0.4118341650342883, 0.022720829592834, -0.3555553790845735, -0.02884925539546616, 0, 0, 0, -0.04649502032520254, 0, 0, -0.3856404851623577, -0.0904677595579295, 0, 0, -0.004441721154209426, 0,
        -0.1100250763493923, 0.1311584295222611, -0.08866489113313041, 0.1493005411184667, 0.04612650800817932, 0, 0.2685891638436405, -0.03190047139659989, 0.2715778169660613, -0.1059553477930818, -0.1105146769981357, -0.2553920460681782, -0.02838982857116527, -0.03341492448374294, -0.0596303968864557, -0.03309284862927384, 0.3041390754656456, 0.2971607063623831, -0.07675274148900463, -0.07251078204050529, -0.08496656823060877, 0.05822615622735797, 0.2293960646914353, 0.03592526158912442, -0.2376969393251933, 0.1429126847197856, -0.3054333446200611, 0.06045626609386934, 0, 0, -0.2172216827969085, 0.09146171583919316, 0.2435154763191939, 0.20942354827565, -0.1862506101143485, 0.2120700039584409, -0.08296081433820048, 0, 0.0646100510347089, -0.03813567681487198, 0.07255319637478293, -0.04499422326743501, -0.04945702766904942, 0.06060418503815446, 0, 0, 0, 0.06075340907828589, 0.05028154149534526, 0.2352220588072697, 0.07922053688261921, -0.04597881888733385, 0, 0, 0.1886164038358524, -0.07697879572833988, -0.03911417823409268, -0.01682804222275495, -0.2007148268665418, -0.05934987092553974, 0, 0, -0.04946336236637865, -0.01213698918424365,
        -0.08644154397081, 0.1671293266314968, 0.07853733120051423, 0, -0.145521315211506, 0.1490466186835389, -0.1244850712560783, 0, 0.006428529474959155, 0.1442884450411071, 0.03499862697057717, -0.03344897972990356, -0.01594858250299935, 0.3479691488204739, -0.0638217092382805, 0, -0.3587885422909457, -0.01738418657545763, 0, 0, 0.0157714218405383, -0.01561317542727698, 0, 0, -0.08104752094074753, -0.1848656452386227, 0, 0, 0, 0.008317643996266904, 0, 0, 0.01357494779519016, 0.08715712621690673, 0.01895720962113882, 0, -0.1280358429458272, 0.1818760392455375, -0.006542201174200252, 0, 0.0672465954989785, 0.0858987144408512, 0.1092318993360965, 0, 0.1840819104466467, -0.002151296004506757, 0, -0.04452655437891317, -0.102711954015175, -0.336333097590137, -0.06821776100185949, 0, -0.05287622912606762, -0.03901111744792678, 0, 0, -0.05866538633368824, -0.2361404660167603, 0, 0, 0, 0, 0, 0,
        0.2161980025760131, 0.0231765187833748, 0.09863628776595387, 0.1447535048160079, 0.250488809324505, -0.05653152282467527, 0.05387103434526399, 0.04975711639927814, -0.10025411355157, 0.06123435999471467, -0.004146496474207193, -0.02380659922465002, 0.02510675158573146, 0.02885185591146386, 0, -0.007042035736815121, -0.153468610555638, -0.02382714295322769, -0.01068379959585838, 0.008794299204520049, 0, 0.0371035472205599, 0, -0.05716488706668201, -0.055371122108024, 0.003991567284835257, 0, -0.05900856532779932, 0, -0.1541058762810287, 0, 0, 0.1104412609253601, -0.03261436969149559, -0.1544300091943817, 0.1313179521439277, 0.1514273651217262, -0.03266764070489585, 0.1649828290860186, 0.2631024254458154, -0.1818828845570761, -0.1501872319961159, 0.007175800850630306, 0.04629464003881898, 0.4323776580743822, -0.2519813657701003, 0.3847054927652167, -0.04143385876292824, -0.2119998455874513, -0.03525125540072613, 0.1706815332652182, -0.2478540964669331, 0.003219210934323157, 0.1641598970501484, 0, -0.05202881051122964, 0.1075353167200685, 0.03845382763106883, 0, -0.1244725190952854, 0.07328402674188747, -0.2279083300065111, 0, 0.1568515209355483,
        -0.06377237948171174, -0.1257905533262283, -0.05719813150299197, -0.1040553174837537, -0.04925048116645412, 0.2027520163083675, -0.3061269475864422, 0.07085617158913135, -0.03904077096906312, -0.4771939036962158, -0.132421506366459, -0.4216173946621241, -0.06117054911841562, 0.4029223212608561, -0.4310001033318107, -0.1448676081458402, 0, 0, 0, 0, 0, 0, 0, 0, -0.006545138627814591, 0.06285297677854125, -0.007719280849740108, 0.1337790556256233, 0, 0.1426122740334488, -0.04591974446055767, 0.3794665094886233, -0.08307454458684463, 0.08427936010085957, -0.05402674183290609, -0.1984362905772137, -0.09765684370065011, 0.06191018880745906, -0.4251229600327406, 0.01981605611575132, 0.2105900048086375, 0.01635584396759702, -0.02376807511254079, 0.01274716209246479, -0.004745495538377356, 0.3760630168001315, -0.2659296949761403, -0.1947170603846374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02326295187210415, -0.002065759704845905, 0.05765634195804839, 0, 0.07920293248001925, -0.001386008813776289, 0.5824447832565509,
        0.0228381303888002, -0.1529175097738284, -0.03969242243781918, 0.06710842483346621, -0.129741991666938, 0.4196292022727006, 0.08965748935092788, 0.125514513582229, 0.01626322677928412, 0, -0.004168629028847986, 0, -0.03734733203012119, 0, 0.0370375438663938, 0, -0.2409563716737792, 0, -0.2970861737746124, 0, 0.1386914567443866, 0.06495415438100488, 0.1222872705594018, -0.02129301639819806, 0, 0, -0.0175649016640292, 0, 0.07636188408059548, 0, 0, 0, 0.1030995771321471, 0, -0.1305002181930095, 0, -0.1117955058749762, -0.03189333588326504, 0.3230694439326788, 0.02201817605861717, 0, 0, 0, 0, 0.03257260028000625, 0, 0, 0, -0.02582003468393116, 0, 0, 0, -0.3263075188950373, 0, 0.248359462365396, 0.004592135224415191, 0, 0, 0, 0, 0, 0, -0.02656589451712456, 0,
        -0.1282469790539934, 0, -0.03789895273108622, 0, 0.1677331237902216, -0.1404830775842158, -0.204008056218904, 0.3213259101124355, -0.02600557640798441, 0, -0.0614034634415085, 0, -0.07578016946116981, -0.0684661692757888, 0.469101085764455, 0.0709367299912792, -0.002684541986432827, 0, 0.2447063459360661, 0, 0.01741138480375466, 0.1821411989642361, -0.03813177972255744, -0.139129900813802, -0.130872321175346, 0, -0.0371011227137274, 0, 0.1214315259992829, 0, 0.09196099184169393, -0.06309272585720291, -0.1034928774559675, 0, -0.1168538554286078, 0, 0.2142568703909989, -0.1437309023718796, -0.04701341590252908, -0.3787908017774659, 0.02549856581812467, 0, -0.03623360984640581, 0, 0.09195218716885743, -0.1009534262186023, 0.1545435151905562, -0.0268909873976061, -0.3776712569809121, 0, 0.09726376310904414, 0, 0.2359065142970981, -0.2575037220972957, -0.04135815743773087, -0.2168897800220299, -0.1216574474474807, 0, -0.06898917810897344, 0, 0.02961242832812208, 0.0357658974556033, -0.01834779754308802, -0.1672938161403846,
        0, 0.04041037373479477, -0.006077210870845212, 0.1038757418807543, 0, 0, -0.09951955989771964, -0.2419605738027665, 0, -0.2044147473851287, 0, 0.370330103916917, 0, 0, -0.3414012513854764, -0.01130095589171229, 0, 0.05537002583131236, 0, 0.1374876177867636, 0, 0, -0.02471676439912596, -0.3902073317292758, 0, -0.0885731233897578, -0.02576841214537174, 0.2294805447309214, 0, 0, -0.1569242195359349, 0.01652807272584042, -0.004614381752296629, 0.07366815576577275, -0.001507477630905501, -0.04213619796161211, 0, 0, -0.06916518416454728, -0.1563148764376683, -0.01551201220985313, 0.03792799854167143, -0.006547316150472811, -0.1613454421196136, 0, 0, -0.4480311294750207, 0.06233655768606036, -0.007379411560216912, -0.1059216106052851, 0, 0.4401746307383236, 0, 0, -0.06964544017496614, 0.0641927143593965, -0.001950695855044193, -0.4326046338565985, -0.009097533326050965, 0.05246044854727685, 0, 0, -0.3941851080429463, -0.01233737957041939,
        0.1831528695282355, -0.0632447108668063, 0.1772012680217288, -0.03220574341872304, -0.06144129814702017, -0.07601600962602613, -0.1642066456920182, -0.01332413570866813, -0.0239727083731962, 0, 0.10689776306485, 0, 0.3359371582153691, 0, -0.1024440259870563, 0, -0.05711792524372984, 0, -0.006636950326493292, 0, -0.08658699992252455, 0, -0.07656033667691858, 0, -0.01345133400397719, 0, -0.09136296743815146, 0, 0.2428358407196701, -0.03581116571217728, 0.3604667388093897, 0, 0.08955250636843082, 0.1101663709086343, -0.02887493803820921, 0.05481192073105309, -0.07107405183888657, -0.2504907150626827, 0.08144587584163195, -0.08781808206050272, -0.263104057840195, 0, -0.6945381965374551, 0, 0.04600442810547095, -0.01926232701891937, -0.06157129401302667, -0.06188911482693352, 0.349759285082367, 0, -0.04061038404705537, 0, -0.0718731846822825, 0, 0.1151980320507438, 0.009365398741911047, 0.009061119004592812, 0, -0.1077645083685405, -0.08897402977578857, -0.1503708613044489, -0.08603919017412798, 0.02200696173891782, 0.08837297602685176,
        -0.4683417451511815, 0.1658981956732955, 0.4664851965539361, 0.2124304834720017, 0.08120290798385496, 0.003391626543478141, 0.2720059391786182, -0.1144692123223313, 0, 0.0914663408009088, 0, -0.08044904359078717, 0.2310778061391, 0.3875243228844082, 0.1228261003948686, 0.00873011728091151, 0.2117185423105022, 0.01926782099779617, -0.1028196240636832, 0.1989871293535454, 0.1103454823459566, -0.05885834620745213, -0.06532156134550984, -0.1529326210691704, 0.1027430247993809, 0.10132121258169, 0.1237018660626779, -0.3665163070790744, 0.007157411883090642, -0.02364466436297208, 0.2800580453099006, -0.03031794663183333, 0.2181091641819331, -0.2265130483356741, 0.09074463119580981, 0.1910193265844335, 0.1331115156639361, -0.2113492993977789, 0.2410384890018004, 0.09303276641799031, 0, 0, 0, 0, -0.03727458117082931, 0.07102548148595417, -0.04376209806707664, -0.009358330821772459, -0.03043620929559721, 0.0765565546457324, 0, -0.01962316445127422, -0.07893645192682376, -0.01149175889822012, -0.1113917997767834, -0.1044349024889635, 0, 0.05795922381164356, 0, 0.05557063669669062, -0.06654799413416275, 0.1076644143062399, -0.01950502583657715, 0.1312188140550485,
        -0.2251517949797992, 0, 0, 0, 0.1446721909102991, 0, 0, 0, 0, 0, 0, 0, -0.02554372144754536, 0, 0, 0, -0.4258773789566528, 0, -0.0910310753094648, 0, 0.4698509429321278, 0, -0.2434378079079669, 0.1004992750940065, 0, 0, 0, 0, 0.05924586256112185, 0, -0.6471691042079692, 0.6049037567383784, -0.1711116492494889, 0, 0, 0, -0.4865259269123516, 0, 0, 0, 0, 0, 0, 0, 0.03249676096048088, 0, 0, 0, -0.3115955277431351, 0, -0.01063089144569439, 0, 0.5150501692230456, 0, -0.0257852027388298, 0.07961563683007665, 0, 0, 0, 0, -0.06409725288536167, 0, -0.2150036060269897, 0.4813188450499333,
        -0.02744854810189091, 0, 0, 0, -0.2728081678019542, 0, 0.08497698638215537, 0, 0, 0, 0, 0, 0.01436950149722772, 0, 0, 0, 0.3625864519522039, -0.1281963934792321, 0, 0, -0.06558291332916977, -0.0002072407264988845, -0.000160189184847275, 0, 0, 0, 0, 0, 0.0206374951794391, 0, -0.01995745210432515, 0, 0.001453749555777006, 0, 0.08637129686541317, 0, -0.2296403613874557, 0, 0.196086290152349, 0, 0, 0, 0, 0, -0.2101618639070985, 0, -0.01533940794757854, 0, 0.003313612431908113, -0.195430120968154, -0.193951697343638, 0, 0.2245078381181337, -0.04830780249946654, 0.2244819744098702, 0, 0, 0, 0, 0, -0.1841591355776221, 0, -0.009504787757167279, -0.01308340624854145,
        -0.09098139173090518, -0.02126490822344399, 0, -0.3398268039057486, 0, -0.1841070159173824, 0, -0.04303926250425428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2356951844680628, 0, -0.009376240170304031, 0, 0.1939792135424525, 0, 0, 0, -0.2331789055103385, 0, 0, 0, -0.01899404137674297, 0, 0, -0.1050884493477817, 0.03320756580029067, -0.01277755536516229, -0.1461162222551076, -0.03053793125179084, -0.09232181625450796, -0.02384924016492679, 0.1253296347740766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2832124724534956, 0, -0.08377489478773772, 0, -0.3006059128905199, 0, -0.2754991749324377, 0, 0.2774931267752134, 0, -0.2817470105977518, 0, -0.2852431141891961, 0, 0.3729338474872879,
        -0.01424419587373021, -0.06838433925664084, -0.117064556299521, -0.01804647347418635, 0, -0.3182031406992568, -0.08440412328603718, 0.04321634794165984, 0, 0.0538707384107586, 0, 0.4015504695611948, 0, 0, 0, -0.2460274375980007, 0, 0, -0.0702740721964371, 0.06775821780678243, 0, -0.016065812208897, 0, 0.2398512364637727, 0, 0, 0, -0.1379757846747341, 0, 0, 0, -0.2132030110484865, 0, -0.2248685964783195, 0.1863642052597835, 0.04780500493266292, 0, -0.04803743815522143, -0.09807991838329509, -0.09424453632128726, 0, 0, 0, 0.1134176231908145, 0, 0, 0, 0.09184915792118908, 0, 0, -0.06495933026326431, -0.2063950960306956, 0, 0, -0.01112631142801606, 0.007299234559793972, 0, 0, 0, -0.07166246195544385, 0, 0, 0, -0.0416459223066656,
        -0.08398401317524674, 0, -0.05907092890815101, 0, 0.2839267720952845, 0, -0.4038178350765902, 0, 0.003993878339363089, 0, 0.1914820618648975, 0, 0.1400478290774514, 0, 0.01311654058303542, 0, 0.201439848096431, -0.0378014019797217, -0.4124959548961734, 0.2499122826646528, -0.00441652726961495, -0.03320827175200455, -0.07949870750295367, -0.01779662156417972, -0.1805740214509708, -0.1839032518035596, -0.2349611778366466, 0.2990966706377015, -0.2615400841348951, -0.2334219057258204, 0.04530646484194918, 0.2918256251217926, 0.01940639454670137, 0, 0.02462796900119767, 0, -0.09854239981952126, 0, -0.07906605574039909, 0, 0.02344588063989828, 0, -0.04247034655753218, 0, -0.2020098034456407, 0, -0.007664529084607245, 0, 0.04915612313084354, 0.06236159312143169, -0.1705372685016563, 0.3236746522057732, 0.1013485344867523, -0.08545726686680001, -0.1833109254904584, 0.1373111975105131, 0.097584887912368, -0.1277129832087815, -0.05301223654198164, 0.4424398748279206, 0.2684630382410108, -0.09897475133611207, 0.1683013257507831, -0.1432102082246803,
        0.2601263312559621, -0.06235891993243538, -0.07173157062932903, -0.1605115055730033, 0.4678845548896813, 0.05405336273165506, -0.2805317672089943, 0.2415687890120105, -0.4437449079568503, -0.008466428006138728, -0.01144773823298946, 0.1990519324057607, 0.3251005482172787, -0.2512636340000436, -0.08726332949171604, -0.3136962017760915, 0.0859685796822285, -0.04491017780730409, 0.120997224829506, 0.2320381601329937, -0.1022104537354773, 0.01133179543705653, -0.3496590902589908, -0.1514361577162772, 0.1085713294040933, -0.05182493003335024, 0.0006950990549158783, -0.04227330847000214, 0.0003057647185861635, 0.08427171464357738, 0.1143882108437347, 0.3580713581123009, 0, -0.02952696493841704, 0, 0.1268017025798269, 0, -0.05773137434258278, 0, -0.04401556469294218, 0, 0.03638572668048232, 0, -0.2591398720442293, 0, -0.03492810610640297, 0, -0.02682670339248389, 0, -0.311700616563879, 0, 0.133550855434503, 0, -0.1864428018243592, 0, 0.1191991424362843, 0, 0.01306544744949093, 0, -0.172694371156155, 0, -0.07383593086605247, 0, 0.1214763777583937
    ]
    scale = 1
    bias = 0
    model_ctrs = catboost_model_ctrs_container(
        used_model_ctrs_count = 4,
        compressed_model_ctrs = [
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [0],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 14216163332699387096, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387096, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 0.5, prior_denom = 1, shift = -0, scale = 15),
                    catboost_model_ctr(base_hash = 14216163332699387096, base_ctr_type = "Borders", target_border_idx = 0, prior_num = 1, prior_denom = 1, shift = -0, scale = 15)
                ]
            ),
            catboost_compressed_model_ctr(
                projection = catboost_projection(
                    transposed_cat_feature_indexes = [1],
                    binarized_indexes = []
                ),
                model_ctrs = [
                    catboost_model_ctr(base_hash = 16890222057671696982, base_ctr_type = "Counter", target_border_idx = 0, prior_num = 0, prior_denom = 1, shift = -0, scale = 15)
                ]
            )
        ],
        ctr_data = catboost_ctr_data(
            learn_ctrs = {
                14216163332699387096 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 4454093409665093186 : 1, 3888055050407476027 : 2, 18446744073709551615 : 0, 1597844894479345157 : 3, 5815403483304642741 : 0, 18446744073709551615 : 0},
                    target_classes_count = 2,
                    counter_denominator = 0,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 3.08426e-42, count = 1003), catboost_ctr_mean_history(sum = 3.81293e-42, count = 916), catboost_ctr_mean_history(sum = 6.37591e-43, count = 192), catboost_ctr_mean_history(sum = 1.4013e-44, count = 2)],
                    ctr_total = [2201, 1003, 2721, 916, 455, 192, 10, 2]
                ),
                16890222057671696982 :
                catboost_ctr_value_table(
                    index_hash_viewer = {18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 4459051883809310595 : 1, 12688609011033681315 : 0, 4182892933583572005 : 2, 2968031972128081286 : 13, 3631575645985400486 : 3, 17057205213928917736 : 9, 7929064537683029705 : 6, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 3666806293097395119 : 8, 18446744073709551615 : 0, 18446744073709551615 : 0, 6651508568508207666 : 10, 4168605957791092082 : 7, 10837328490212896020 : 12, 18446744073709551615 : 0, 18446744073709551615 : 0, 13764890645739670519 : 11, 18446744073709551615 : 0, 18446744073709551615 : 0, 18446744073709551615 : 0, 3029942133001430107 : 5, 1395774795794115932 : 4, 8039754258896783324 : 14, 18446744073709551615 : 0, 18446744073709551615 : 0},
                    target_classes_count = 0,
                    counter_denominator = 5944,
                    ctr_mean_history = [catboost_ctr_mean_history(sum = 8.32932e-42, count = 665), catboost_ctr_mean_history(sum = 3.64338e-44, count = 412), catboost_ctr_mean_history(sum = 5.60519e-44, count = 96), catboost_ctr_mean_history(sum = 9.94922e-44, count = 34), catboost_ctr_mean_history(sum = 1.80768e-43, count = 37), catboost_ctr_mean_history(sum = 1.12104e-44, count = 10), catboost_ctr_mean_history(sum = 2.10195e-44, count = 11)],
                    ctr_total = [5944, 665, 26, 412, 40, 96, 71, 34, 129, 37, 8, 10, 15, 11, 2]
                )
            }
        )
    )


### Routines to compute CTRs

def calc_hash(a, b):
    max_int = 0xffFFffFFffFFffFF
    MAGIC_MULT = 0x4906ba494954cb65
    return (MAGIC_MULT * ((a + MAGIC_MULT * b) & max_int)) & max_int


def calc_hashes(binarized_features, hashed_cat_features, transposed_cat_feature_indexes, binarized_feature_indexes):
    result = 0
    for cat_feature_index in transposed_cat_feature_indexes:
        result = calc_hash(result, hashed_cat_features[cat_feature_index])
    for bin_feature_index in binarized_feature_indexes:
        binary_feature = binarized_features[bin_feature_index.bin_index]
        if not(bin_feature_index.check_value_equal):
            result = calc_hash(result, 1 if (binary_feature >= bin_feature_index.value) else 0)
        else:
            result = calc_hash(result, 1 if (binary_feature == bin_feature_index.value) else 0)
    return result


def calc_ctrs(model_ctrs, binarized_features, hashed_cat_features, result):
    ctr_hash = 0
    result_index = 0

    for i in range(len(model_ctrs.compressed_model_ctrs)):
        proj = model_ctrs.compressed_model_ctrs[i].projection
        ctr_hash = calc_hashes(binarized_features, hashed_cat_features, proj.transposed_cat_feature_indexes, proj.binarized_indexes)
        for j in range(len(model_ctrs.compressed_model_ctrs[i].model_ctrs)):
            ctr = model_ctrs.compressed_model_ctrs[i].model_ctrs[j]
            learn_ctr = model_ctrs.ctr_data.learn_ctrs[ctr.base_hash]
            ctr_type = ctr.base_ctr_type
            bucket = learn_ctr.resolve_hash_index(ctr_hash)
            if bucket is None:
                result[result_index] = ctr.calc(0, 0)
            else:
                if ctr_type == "BinarizedTargetMeanValue" or ctr_type == "FloatTargetMeanValue":
                    ctr_mean_history = learn_ctr.ctr_mean_history[bucket]
                    result[result_index] = ctr.calc(ctr_mean_history.sum, ctr_mean_history.count)
                elif ctr_type == "Counter" or ctr_type == "FeatureFreq":
                    ctr_total = learn_ctr.ctr_total
                    denominator = learn_ctr.counter_denominator
                    result[result_index] = ctr.calc(ctr_total[bucket], denominator)
                elif ctr_type == "Buckets":
                    ctr_history = learn_ctr.ctr_total
                    target_classes_count = learn_ctr.target_classes_count
                    total_count = 0
                    good_count = ctr_history[bucket * target_classes_count + ctr.target_border_idx];
                    for class_id in range(target_classes_count):
                        total_count += ctr_history[bucket * target_classes_count + class_id]
                    result[result_index] = ctr.calc(good_count, total_count)
                else:
                    ctr_history = learn_ctr.ctr_total;
                    target_classes_count = learn_ctr.target_classes_count;

                    if target_classes_count > 2:
                        good_count = 0
                        total_count = 0
                        for class_id in range(ctr.target_border_idx + 1):
                            total_count += ctr_history[bucket * target_classes_count + class_id]
                        for class_id in range(ctr.target_border_idx + 1, target_classes_count):
                            good_count += ctr_history[bucket * target_classes_count + class_id]
                        total_count += good_count;
                        result[result_index] = ctr.calc(good_count, total_count);
                    else:
                        result[result_index] = ctr.calc(ctr_history[bucket * 2 + 1], ctr_history[bucket * 2] + ctr_history[bucket * 2 + 1])
            result_index += 1



cat_features_hashes = {
    "buy house": -2026268734,
    "small business": -1889862355,
    "medical bills": -1814324623,
    "Own Home": -1800877773,
    "Home Mortgage": -1732047598,
    "major purchase": -1679215940,
    "renewable energy": -1533374148,
    "debt consolidation": -702937637,
    "wedding": -624589516,
    "educational expenses": -157467057,
    "Long Term": -121645124,
    "moving": 697868278,
    "take a trip": 964069672,
    "Rent": 968225853,
    "vacation": 1221462658,
    "other": 1296376507,
    "buy a car": 1373202259,
    "Short Term": 1402277522,
    "business loan": 1425520839,
    "Have Mortgage": 1482660365,
    "home improvements": 1901884950,
}

def hash_uint64(string):
    return cat_features_hashes.get(str(string), 0x7fFFffFF)


### Applicator for the CatBoost model

def apply_catboost_model(float_features, cat_features=[], ntree_start=0, ntree_end=catboost_model.tree_count):
    """
    Applies the model built by CatBoost.

    Parameters
    ----------

    float_features : list of float features

    cat_features : list of categorical features
        You need to pass float and categorical features separately in the same order they appeared in train dataset.
        For example if you had features f1,f2,f3,f4, where f2 and f4 were considered categorical, you need to pass here float_features=f1,f3, cat_features=f2,f4


    Returns
    -------
    prediction : formula value for the model and the features

    """
    if ntree_end == 0:
        ntree_end = catboost_model.tree_count
    else:
        ntree_end = min(ntree_end, catboost_model.tree_count)

    model = catboost_model

    assert len(float_features) >= model.float_feature_count
    assert len(cat_features) >= model.cat_feature_count

    # Binarise features
    binary_features = [0] * model.binary_feature_count
    binary_feature_index = 0

    for i in range(len(model.float_feature_borders)):
        for border in model.float_feature_borders[i]:
            binary_features[binary_feature_index] += 1 if (float_features[model.float_features_index[i]] > border) else 0
        binary_feature_index += 1
    transposed_hash = [0] * model.cat_feature_count
    for i in range(model.cat_feature_count):
        transposed_hash[i] = hash_uint64(cat_features[i])

    if len(model.one_hot_cat_feature_index) > 0:
        cat_feature_packed_indexes = {}
        for i in range(model.cat_feature_count):
            cat_feature_packed_indexes[model.cat_features_index[i]] = i
        for i in range(len(model.one_hot_cat_feature_index)):
            cat_idx = cat_feature_packed_indexes[model.one_hot_cat_feature_index[i]]
            hash = transposed_hash[cat_idx]
            for border_idx in range(len(model.one_hot_hash_values[i])):
                binary_features[binary_feature_index] |= (1 if hash == model.one_hot_hash_values[i][border_idx] else 0) * (border_idx + 1)
            binary_feature_index += 1

    if hasattr(model, 'model_ctrs') and model.model_ctrs.used_model_ctrs_count > 0:
        ctrs = [0.] * model.model_ctrs.used_model_ctrs_count;
        calc_ctrs(model.model_ctrs, binary_features, transposed_hash, ctrs)
        for i in range(len(model.ctr_feature_borders)):
            for border in model.ctr_feature_borders[i]:
                binary_features[binary_feature_index] += 1 if ctrs[i] > border else 0
            binary_feature_index += 1

    # Extract and sum values from trees
    result = 0.
    tree_splits_index = 0
    current_tree_leaf_values_index = 0
    for tree_id in range(ntree_start, ntree_end):
        current_tree_depth = model.tree_depth[tree_id]
        index = 0
        for depth in range(current_tree_depth):
            border_val = model.tree_split_border[tree_splits_index + depth]
            feature_index = model.tree_split_feature_index[tree_splits_index + depth]
            xor_mask = model.tree_split_xor_mask[tree_splits_index + depth]
            index |= ((binary_features[feature_index] ^ xor_mask) >= border_val) << depth
        result += model.leaf_values[current_tree_leaf_values_index + index]
        tree_splits_index += current_tree_depth
        current_tree_leaf_values_index += (1 << current_tree_depth)
    return model.scale * result + model.bias



